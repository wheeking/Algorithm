package baekjoon;

import java.util.Scanner;

public class B17135_캐슬디펜스 {
	public static int[][] map;
	public static int[][] visited;	// 궁수 위치
	public static int D;
	public static int max;
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int N = sc.nextInt();
		int M = sc.nextInt();
		D = sc.nextInt();
		map = new int[N+1][M];
		max = 0;
		
		for (int i = 0; i < map.length - 1; i++) {
			for (int j = 0; j < map[i].length; j++) {
				map[i][j] = sc.nextInt();
			}
		}
		
		move();
		print();
		
//		game(0, 0);
//		move();
//		move();
		
		
		//System.out.println(max);
		
		
	}	// end of main
	// 궁수의 위치는 (N, xx), 조합 수 MC3
	public static void game(int start, int cnt) {
		if (cnt == 3)	{	// 종료 조건. 궁수 세명
			int killCount = 0;
			// 궁수 배치 후에 할 일.
			while (true) {
				if (checkMap() == 1)
					break;
				
				// 궁수 배치된 곳. 3 곳
				for (int k = 0; k < map[0].length; k++) {
					// 궁수 위치
					if (map[map.length - 1][k] == 1) {
						int breakF = 0;
						for (int i = map.length-2; i >= map.length - D; i--) {
							for (int j = 0; j < map[0].length; j++) {
								// 적이 있고, 궁수랑 거리가 D 이하일 때
								if (map[i][j] == 1 && measure(map.length-1, k, i, j) <= D) {
									map[i][j] = 0;
									killCount++;
									breakF = 1;
									break;
								}
							}
							if (breakF == 1)
								break;
						}
					}
				}
				print();
			}
			
			if (killCount > max)
				max = killCount;
			return;
		}
		
		// 수행 (N,0)부터
		for (int i = start; i < map[0].length; i++) {
			if (map[map.length - 1][i] == 0) {
				map[map.length - 1][i] = 1;
				game(i+1, cnt+1);
				map[map.length - 1][i] = 0;
			}
		}
	}
	
	// 게임 끝나면(모두 0) 1 리턴
	public static int checkMap() {
		int flag = 1;
		int bflag = 1;
		for (int i = 0; i < map.length; i++) {
			for (int j = 0; j < map[i].length; j++) {
				if (map[i][j] == 1) {
					flag = 0;
					bflag = 0;
					break;
				}
			}
			if (bflag == 0)
				break;
		}
		
		if (flag == 0)
			return 0;
		else
			return 1;
	}
	// 적 이동
	public static void move() {
		for (int i = map.length-2; i > 0; i--) {
			for (int j = 0; j < map[i].length; j++) {
				map[i][j] = map[i-1][j];
			}
		}
		
		for (int i = 0; i < map[0].length; i++) {
			map[0][i] = 0;
		}
		
	}
	
	public static int measure(int x1, int y1, int x2, int y2) {

		int distance = Math.abs(x1-x2) + Math.abs(y2-y1);
		
		return distance;
	}
	
	public static void print() {
		for (int i = 0; i < map.length; i++) {
			for (int j = 0; j < map[0].length; j++) {
				System.out.print(map[i][j] + " ");
			}
			System.out.println();
		}
	}
}


