import java.util.Scanner;

public class SWEA1266_소수완제품 {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int T = sc.nextInt();
		
		for (int test_case = 1; test_case <= T; test_case++) {
			int[] primeNumber = {2, 3, 5, 7, 11, 13, 17};
			double pA = sc.nextDouble();
			double pB = sc.nextDouble();
			pA = pA / 100;
			pB = pB / 100;
			// 18 이하 소수 2 3 5 7 11 13 17
			// A가 소수일 확률
			double pnpA = 1;
			double eachSumA = 0;
			double sumA = 0;
			// 소수개 성공할 때 확률(2, 3, 5 ...
			for (int k = 0; k < 7; k++) {
				eachSumA = eachPrimePercent(primeNumber[k], pA);
				sumA += eachSumA;
			}
			
			
			// B가 소수개 성공할 확률
			double pnpB = 1;
			double eachSumB = 0;
			double sumB = 0;
			// 소수개 성공할 때 확률(2, 3, 5 ...
			for (int k = 0; k < 7; k++) {
				eachSumB = eachPrimePercent(primeNumber[k], pB);
				sumB += eachSumB;
			}
			
			// A B 둘다 성공할 확률
			double pnpAB = 0;
			for (int i = 0; i < primeNumber.length; i++) {
				for (int j = 0; j < primeNumber.length; j++) {
					pnpAB += eachPrimePercent(primeNumber[i], pA) * eachPrimePercent(primeNumber[j], pB);
				}
			}
			
			System.out.println(sumA + " " + sumB + " " + pnpAB);
			
		}
	}
	
	public static double eachPrimePercent(int k, double p) {
		double ans;
		double pnp = 1;
		for (int i = 0; i < k; i++) {
			pnp *= p;
		}
		for (int i = k; i < 18; i++) {
			pnp *= (1-p);
		}
		ans = comb(18, k) * pnp;
		
		return ans;
	}

	public static double comb(int n, int r) {
		double ans = 1;
		
		for (int i = n; i > n-r; i--) {
			ans *= i;
		}
		
		for (int i = r; i > 0; i--) {
			ans = ans / i;
		}
		
		return ans;
	}
}
